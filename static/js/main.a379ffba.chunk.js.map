{"version":3,"sources":["withLocalStorage.js","AddChore.js","Chore.js","ChoreList.js","App.js","serviceWorker.js","index.js"],"names":["withLocalStorage","WrappedComponent","props","loadFromStorage","key","localStorage","getItem","saveToStorage","value","setItem","removeFromStorage","removeItem","AddChore","React","Component","state","title","lastDone","disableRemove","dueDays","nextDue","setNow","e","this","setState","getNowString","Date","toISOString","getNextDue","days","isNaN","getTime","render","t","ld","dd","nd","add","addChore","className","type","placeholder","onChange","target","onKeyDown","keyCode","onClick","dueClass","daysLeft","timeString","time","seconds","Math","ceil","minutes","floor","secMod","hours","minMod","hourMod","Chore","c","remove","didIt","dateString","maybeDays","nextDueTime","todayTime","formatToNext","ChoreList","chores","map","App","constructor","super","refresh","refreshCounter","chore","saveList","sameChore","c1","c2","addNewChore","console","log","find","newList","removeChore","filter","list","JSON","stringify","data","fromJson","parse","style","position","right","top","margin","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a379ffba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst withLocalStorage = WrappedComponent => {\r\n\treturn props => (\r\n\t\t<WrappedComponent\r\n\t\t\tloadFromStorage={key => localStorage.getItem(key)}\r\n\t\t\tsaveToStorage={(key, value) => localStorage.setItem(key, value)}\r\n\t\t\tremoveFromStorage={key => localStorage.removeItem(key)}\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t)\r\n}\r\nexport default withLocalStorage;\r\n","import React from 'react';\r\nimport withLocalStorage from './withLocalStorage.js';\r\n\r\n// TODO: improve \"now\" and \"add task\" buttons\r\n// TODO: set expected due date (optional)\r\n\r\nclass AddChore extends React.Component {\r\n\tstate = {\r\n\t\ttitle: '',\r\n\t\tlastDone: '',\r\n\t\tdisableRemove: false,\r\n\t\tdueDays: 0,\r\n\t\tnextDue: null\r\n\t}\r\n\trender() {\r\n\t\t// const textChange = key => e => { let o = {}; o[key] = e.target.value; this.setState(o); };\r\n\t\tconst changeTitle = e => this.setState({ title: e.target.value });\r\n\t\tconst changeDone  = e => this.setState({ lastDone: e.target.value });\r\n\t\tconst changeDue = e => {\r\n\t\t\t// if( isNaN(+e.target.value) ) return;\r\n\t\t\tthis.setState({\r\n\t\t\t\tdueDays: e.target.value,\r\n\t\t\t\tnextDue: this.getNextDue(e.target.value)\r\n\t\t\t})\r\n\t\t};\r\n\t\tconst t = this.state.title, ld = this.state.lastDone;\r\n\t\tconst dd = this.state.dueDays, nd = this.state.nextDue;\r\n\t\tconst add = e => this.props.addChore(t, ld, dd, nd);\r\n\t\treturn (\r\n\t\t\t<div className=\"add-chore\">\r\n\t\t\t\tAdd a new task\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t<input type=\"text\" placeholder=\"Title\"\r\n\t\t\t\t\tonChange={changeTitle}\r\n\t\t\t\t\tvalue={this.state.title} />\r\n\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t<input type=\"text\" placeholder=\"Last done\"\r\n\t\t\t\t\tonChange={changeDone}\r\n\t\t\t\t\tvalue={this.state.lastDone}\r\n\t\t\t\t\tonKeyDown={e => e.keyCode === 13 ? add(e) : ''}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<button onClick={this.setNow}>Now</button>\r\n\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t<input type=\"number\"\r\n\t\t\t\t\tplaceholder=\"Days\"\r\n\t\t\t\t\ttitle=\"Expected number of days between events\"\r\n\t\t\t\t\tonChange={changeDue}\r\n\t\t\t\t\tvalue={this.state.dueDays}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t<button onClick={add}>Add task</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) // TODO: fixa sÃ¥ enter funkar i \"last done\"\r\n\t}\r\n\tsetNow = e => {\r\n\t\tthis.setState({ lastDone: this.getNowString() });\r\n\t}\r\n\tgetNowString = () => {\r\n\t\tlet now = new Date();\r\n\t\treturn now.toISOString();\r\n\t}\r\n\tgetNextDue = (days) => {\r\n\t\tif( isNaN(+days) ) return null;\r\n\t\tlet when = new Date((new Date()).getTime() + 3600*24*1000*days);\r\n\t\t// console.log('getNextDue change event:', days, when.toISOString());\r\n\t\treturn when.toISOString();\r\n\t}\r\n}\r\n\r\nexport default withLocalStorage(AddChore);\r\n","import React from 'react';\r\n\r\n// TODO: color-code based on how long overdue\r\n// TODO: add datepicker\r\n// TODO: add checkbox and trashbin icons instead of boring buttons\r\nconst Chore = ({ c, remove, didIt }) => (\r\n\t<div className={\"chore\" + dueClass(c.dueDays, c.lastDone)}>\r\n\t\t<div className=\"borderText\">\r\n\t\t\t<div>{c.title}</div>\r\n\t\t\t<div title=\"Last done\">{displayTime(c.lastDone)}</div>\r\n\t\t</div>\r\n\t\t<div className=\"discreet borderText\">\r\n\t\t\t<div title=\"How often\">{formatDueDays(c.dueDays)}</div>\r\n\t\t\t<div title=\"Time to next\">{formatToNext(c)}</div>\r\n\t\t</div>\r\n\t\t<button onClick={() => didIt(c)}>Did it!</button>\r\n\t\t<button onClick={e => remove(c.title, c.lastDone)} className=\"ghost\">Remove</button>\r\n\t</div>\r\n)\r\n\r\nconst DAY_MILLIS = 1000*3600*24;\r\n\r\nfunction formatToNext({ lastDone, dueDays }) {\r\n\t// Return string of how long until next due date. Will show negative number if overdue. lastDone=datestring, dueDays=number\r\n\tif( !lastDone || !dueDays ) return 'No due date';\r\n\tlet nextDueTime = (new Date(lastDone)).getTime() + dueDays * DAY_MILLIS;\r\n\tlet todayTime = (new Date()).getTime();\r\n\treturn timeString(nextDueTime - todayTime);\r\n}\r\nfunction formatDueDays(maybeDays) {\r\n\t// How often this event is expected to occur. maybeDays=number or null\r\n\tif( !maybeDays ) {\r\n\t\treturn '';\r\n\t} else if( maybeDays < 1 ) {\r\n\t\treturn 'More than once a day'\r\n\t} else if( maybeDays < 2 ) {\r\n\t\treturn 'Every day'\r\n\t} else {\r\n\t\treturn `Every ${maybeDays} days`;\r\n\t}\r\n}\r\n\r\n// function daysBetween(t1, t2) {\r\n// \tlet diff = ((new Date(t2)).getTime() - (new Date(t1)).getTime())\r\n// \t \t/ DAY_MILLIS;\r\n// \treturn diff;\r\n// }\r\nfunction daysToNextDue(doneString, days) {\r\n\t// Returns days until next due date as a number\r\n\tlet lastTime = new Date(doneString).getTime();\r\n\tlet nextTime = lastTime + days * DAY_MILLIS;\r\n\tlet todayTime = new Date().getTime();\r\n\tlet daysLeft = (nextTime - todayTime) / DAY_MILLIS;\r\n\r\n\treturn daysLeft;\r\n}\r\nfunction dueClass(dueDays, lastDone) {\r\n\t// Returns a CSS class string. Overdue event -> red bg\r\n\tif( !dueDays || !lastDone ) return '';\r\n\tlet daysLeft = daysToNextDue(lastDone, dueDays);\r\n\tif( daysLeft < 0 ) {\r\n\t\treturn ' overdue';\r\n\t} else if( daysLeft < 1 ) {\r\n\t\treturn ' soon';\r\n\t} else {\r\n\t\treturn '';\r\n\t}\r\n}\r\nfunction displayTime(dateString) {\r\n\t// Return a string of time units, based on time left until a datestring.\r\n\tlet diff = (new Date()).getTime() - (new Date(dateString)).getTime();\r\n\treturn timeString(diff);\r\n}\r\nfunction timeString(time) {\r\n\t// Return a string of time units. \"1h, 7min\"\r\n\tif( time < 0 ) return '-' + timeString(-time);\r\n\r\n\tlet seconds = Math.ceil(time / 1000);\r\n\tif( seconds < 60 ) return `${seconds}s`;\r\n\r\n\tlet minutes = Math.floor(seconds / 60), secMod = seconds % 60;\r\n\tif( minutes < 60 ) return `${minutes}min, ${secMod}s`;\r\n\r\n\tlet hours = Math.floor(minutes / 60), minMod = minutes % 60;\r\n\tif( hours < 24 ) return `${hours}h, ${minMod}min`;\r\n\r\n\tlet days = Math.floor(hours / 24), hourMod = hours % 24;\r\n\tif( days < 14 ) return `${days}d, ${hourMod}h`;\r\n\r\n\treturn `More than ${days}d`;\r\n}\r\n\r\nexport default Chore;\r\n","import React from 'react';\r\nimport Chore from './Chore.js';\r\n\r\n// TODO: sort by last done date\r\nconst ChoreList = ({ chores, remove, didIt }) => (\r\n\t<div className=\"chore-list\">\r\n\t\t{chores.map(c => (\r\n\t\t\t<Chore\r\n\t\t\t\tc={c}\r\n\t\t\t\tdidIt={didIt}\r\n\t\t\t\tremove={remove}\r\n\t\t\t\tkey={c.title + c.lastDone}\r\n\t\t\t\tdueDays={c.dueDays}\r\n\t\t\t\tnextDue={c.nextDue}\r\n\t\t\t\t/>)\r\n\t\t)}\r\n\t</div>\r\n);\r\n\r\nexport default ChoreList;\r\n","import React, { Component } from 'react';\nimport AddChore from './AddChore.js';\nimport ChoreList from './ChoreList.js';\nimport withLocalStorage from './withLocalStorage';\n\n\n// TODO: \"refresh\" button\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet data = props.loadFromStorage('chores');\n\t\tif( !data ) {\n\t\t\tlocalStorage.setItem('chores', JSON.stringify([]));\n\t\t}\n\t\tlet fromJson = [];\n\t\tif( data ) {\n\t\t\ttry {\n\t\t\t\tfromJson = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tfromJson = [];\n\t\t\t}\n\t\t}\n\t\tthis.state = {\n\t\t\tchores: fromJson,\n\t\t\trefreshCounter: 0\n\t\t}\n\t}\n\trender() {\n\t\tconst position = {\n\t\t\tposition: 'absolute', right: '0px', top: '0px', margin: '0px'\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<button onClick={this.refresh} style={position}>Refresh</button>\n\t\t\t\t<AddChore addChore={this.addNewChore} />\n\t\t\t\t<ChoreList chores={this.state.chores}\n\t\t\t\t\tremove={this.removeChore}\n\t\t\t\t\tdidIt={this.didIt} />\n\t\t\t</div>\n\t\t);\n\t}\n\trefresh = () => {\n\t\tthis.setState({ refreshCounter: this.refreshCounter + 1 })\n\t}\n\tdidIt = chore => {\n\t\tthis.saveList(this.state.chores.map(\n\t\t\tc => {\n\t\t\t\tif( this.sameChore(c, chore) ) {\n\t\t\t\t\treturn { ...c, lastDone: new Date().toISOString() };\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t})\n\t \t);\n\t}\n\tsameChore = (c1, c2) => c1.title === c2.title && c1.lastDone === c2.lastDone\n\n\taddNewChore = (title, lastDone, dueDays, nextDue) => {\n\t\tconsole.log('Add new', dueDays, nextDue);\n\t\tif( !this.state.chores.find(c => this.sameChore(c, { title, lastDone })) ) {\n\t\t\tconst newList = [...this.state.chores, { title, lastDone, dueDays, nextDue } ];\n\t\t\tthis.saveList(newList);\n\t\t}\n\t}\n\tremoveChore = (title, lastDone) => {\n\t\tconst newList = this.state.chores.filter(c => c.title !== title || c.lastDone !== lastDone);\n\t\tthis.saveList(newList);\n\t}\n\tsaveList = list => {\n\t\tthis.setState({ chores: list });\n\t\tthis.props.saveToStorage('chores', JSON.stringify(list));\n\t}\n}\n\n\n\nexport default withLocalStorage(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}